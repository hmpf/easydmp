# -*- coding: utf-8 -*-
# Generated by Django 1.11.18 on 2019-08-01 11:35
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import easydmp.dmpt.models


class Migration(migrations.Migration):

    replaces = [('dmpt', '0001_initial'), ('dmpt', '0002_auto_20170921_1032'), ('dmpt', '0003_auto_20170921_1220'), ('dmpt', '0004_auto_20170922_0911'), ('dmpt', '0005_section_comment'), ('dmpt', '0006_two_new_question_types'), ('dmpt', '0007_add_externalchoicequestion'), ('dmpt', '0008_add_externalmultionechoicequestion'), ('dmpt', '0009_add_namedurlquestion'), ('dmpt', '0010_add_multinamedurlonetextquestion'), ('dmpt', '0011_auto_20180111_0955'), ('dmpt', '0012_add_indexes'), ('dmpt', '0013_decouple_from_flow'), ('dmpt', '0014_cannedanswer_position'), ('dmpt', '0015_add_subsection_support'), ('dmpt', '0016_question_obligatory'), ('dmpt', '0017_create_model_templateaccess'), ('dmpt', '0018_use_guardian_for_template'), ('dmpt', '0019_migrate_to_guardian'), ('dmpt', '0020_obligatory_default_true'), ('dmpt', '0021_section_branching'), ('dmpt', '0022_set_not_null'), ('dmpt', '0023_add_ordering_indexes'), ('dmpt', '0024_template_box_choice'), ('dmpt', '0025_add_related_names'), ('dmpt', '0026_optional_questions'), ('dmpt', '0027_section_modified'), ('dmpt', '0028_add_shortfreetext_question_type'), ('dmpt', '0029_remove_TemplateAccess'), ('dmpt', '0030_more_template_metadata'), ('dmpt', '0031_improve_cloning')]

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('flow', '0001_squashed_0006_add_clonable_model_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('abbreviation', models.CharField(blank=True, max_length=8)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('published', models.DateTimeField(blank=True, help_text='Date when the template is publically available, and set read-only.', null=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('description', models.TextField(blank=True)),
                ('domain_specific', models.BooleanField(default=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('more_info', models.URLField(blank=True)),
                ('retired', models.DateTimeField(blank=True, help_text='Date after which the template should no longer be used.', null=True)),
                ('cloned_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='dmpt.Template')),
                ('cloned_when', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='template',
            options={'permissions': (('use_template', 'Can use template'),)},
        ),
        migrations.AlterUniqueTogether(
            name='template',
            unique_together=set([('version', 'title')]),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='May be empty for **one** section per template', max_length=255)),
                ('introductory_text', models.TextField(blank=True)),
                ('position', models.PositiveIntegerField(default=1, help_text='A specific position may only occur once per template')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='dmpt.Template')),
                ('comment', models.TextField(blank=True)),
                ('label', models.CharField(blank=True, max_length=16)),
                ('section_depth', models.PositiveSmallIntegerField(default=1)),
                ('super_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subsections', to='dmpt.Section')),
                ('branching', models.BooleanField(default=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('cloned_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='dmpt.Section')),
                ('cloned_when', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together=set([('template', 'title'), ('template', 'position')]),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_type', models.CharField(choices=[('bool', 'bool'), ('choice', 'choice'), ('daterange', 'daterange'), ('multichoiceonetext', 'multichoiceonetext')], max_length=18)),
                ('position', models.PositiveIntegerField(default=1, help_text='Position in section. Must be unique.')),
                ('question', models.CharField(max_length=255)),
                ('label', models.CharField(blank=True, max_length=16)),
                ('help_text', models.TextField(blank=True)),
                ('framing_text', models.TextField(blank=True)),
                ('node', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payload', to='flow.Node')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='dmpt.Section')),
                ('comment', models.TextField(blank=True, null=True)),
                ('obligatory', models.BooleanField(default=True)),
                ('optional', models.BooleanField(default=False)),
                ('optional_canned_text', models.TextField(blank=True)),
                ('cloned_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='dmpt.Question')),
                ('cloned_when', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='question',
            options={'ordering': ('section', 'position')},
        ),
        migrations.CreateModel(
            name='BooleanQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='ChoiceQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='DateRangeQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='MultipleChoiceOneTextQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='PositiveIntegerQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=(easydmp.dmpt.models.SimpleFramingTextMixin, 'dmpt.question'),
        ),
        migrations.CreateModel(
            name='ReasonQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=(easydmp.dmpt.models.SimpleFramingTextMixin, 'dmpt.question'),
        ),
        migrations.CreateModel(
            name='ExternalChoiceQuestion',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='ExternalMultipleChoiceOneTextQuestion',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='NamedURLQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='MultiNamedURLOneTextQuestion',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='ExternalChoiceNotListedQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='ExternalMultipleChoiceNotListedOneTextQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='MultiDMPTypedReasonOneTextQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('dmpt.question',),
        ),
        migrations.CreateModel(
            name='ShortFreetextQuestion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=(easydmp.dmpt.models.NoCheckMixin, easydmp.dmpt.models.SimpleFramingTextMixin, 'dmpt.question'),
        ),
        migrations.AlterField(
            model_name='question',
            name='input_type',
            field=models.CharField(choices=[('bool', 'bool'), ('choice', 'choice'), ('daterange', 'daterange'), ('multichoiceonetext', 'multichoiceonetext'), ('reason', 'reason'), ('shortfreetext', 'shortfreetext'), ('positiveinteger', 'positiveinteger'), ('externalchoice', 'externalchoice'), ('extchoicenotlisted', 'extchoicenotlisted'), ('externalmultichoiceonetext', 'externalmultichoiceonetext'), ('extmultichoicenotlistedonetext', 'extmultichoicenotlistedonetext'), ('namedurl', 'namedurl'), ('multinamedurlonetext', 'multinamedurlonetext'), ('multidmptypedreasononetext', 'multidmptypedreasononetext')], max_length=32),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together=set([('section', 'position')]),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['input_type', 'id'], name='dmpt_questi_input_t_d0047e_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['section', 'position'], name='dmpt_questi_section_9fdc5f_idx'),
        ),
        migrations.CreateModel(
            name='CannedAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(help_text='Human friendly view of condition', max_length=255)),
                ('canned_text', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('edge', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payload', to='flow.Edge')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canned_answers', to='dmpt.Question')),
                ('position', models.PositiveIntegerField(blank=True, default=1, help_text='Position in question. Just used for ordering.', null=True)),
                ('cloned_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='dmpt.CannedAnswer')),
                ('cloned_when', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AddIndex(
            model_name='cannedanswer',
            index=models.Index(fields=['question', 'position'], name='dmpt_preferred_ca_ordering_idx'),
        ),
        migrations.AddIndex(
            model_name='cannedanswer',
            index=models.Index(fields=['question', 'position', 'id'], name='dmpt_fallback_ca_ordering_idx'),
        ),
        migrations.CreateModel(
            name='TemplateUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions_user', to='dmpt.Template')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='templateuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.CreateModel(
            name='TemplateGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions_group', to='dmpt.Template')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='templategroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
    ]
