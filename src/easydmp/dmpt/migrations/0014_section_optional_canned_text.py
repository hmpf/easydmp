# Generated by Django 3.2.12 on 2022-08-17 06:16

from django.db import migrations, models


def fill_section_optional_canned_text(apps, _):
    Section = apps.get_model('dmpt', 'Section')
    Question = apps.get_model('dmpt', 'Question')
    CannedAnswer = apps.get_model('dmpt', 'CannedAnswer')
    for section in Section.objects.filter(optional=True):
        try:
            question = Question.objects.get(section=section, position=0)
        except Question.DoesNotExist:
            continue
        try:
            ca = CannedAnswer.objects.get(question=question, choice='No')
        except CannedAnswer.DoesNotExist:
            continue
        if ca.canned_text in ('', 'Yes', 'No'):
            continue
        section.optional_canned_text = ca.canned_text
        section.save()


def fill_section_toggle_question(apps, _):
    Section = apps.get_model('dmpt', 'Section')
    Question = apps.get_model('dmpt', 'Question')
    CannedAnswer = apps.get_model('dmpt', 'CannedAnswer')
    ExplicitBranch = apps.get_model('dmpt', 'ExplicitBranch')
    text_to_update = '(Template designer please update)'
    help_text = (text_to_update + 'This is an optional section. '
                 'If you select "No", this section will be skipped.')
    for section in Section.objects.filter(optional=True):
        section.branching = True
        section.save()
        canned_text_no = 'No'
        if section.optional_canned_text:
            canned_text_no = section.optional_canned_text
        try:
            question = Question.objects.get(section=section, position=0)
        except Question.DoesNotExist:
            # Toggle question does not exist, create it
            question = Question.objects.create(
                input_type_id='bool',
                section=section,
                position=0,
                question=text_to_update,
                help_text=help_text,
            )
            branch = ExplicitBranch.objects.create(
                current_question=question,
                category='Last',
                condition='No',
            )
            CannedAnswer.objects.create(
                question=question,
                choice='Yes',
                canned_text='Yes',
            )
            CannedAnswer.objects.create(
                question=question,
                canned_text=canned_text_no,
                choice='No',
                transition=branch,
            )
            continue
        # Possibly partial toggle question exists
        branch, created = ExplicitBranch.objects.get_or_create(
            current_question=question,
            category='Last',
            defaults={'condition': 'No'}
        )
        if branch.condition != 'No':
            branch.condition = 'No'
            branch.save()
        if created:
            CannedAnswer.objects.create(
                question=question,
                canned_text=canned_text_no,
                choice='No',
                transition=branch,
            )
        CannedAnswer.objects.get_or_create(
            question=question,
            choice='Yes',
            defaults={'canned_text': 'Yes'},
        )


def set_answerset_skipped_from_toggle_question_answer(apps, _):
    Section = apps.get_model('dmpt', 'Section')
    Question = apps.get_model('dmpt', 'Question')
    AnswerSet = apps.get_model('plan', 'AnswerSet')
    Plan = apps.get_model('plan', 'Plan')
    # Set skipped
    for section in Section.objects.filter(optional=True):
        try:
            toggle_question = Question.objects.get(
                section=section,
                position=0,
                input_type_id='bool'
            )
        except Question.DoesNotExist:
            AnswerSet.objects.filter(section=section).update(skipped=None)
            continue
        qid = str(toggle_question.id)
        skipped = None
        for answerset in AnswerSet.objects.filter(section=section):
            answer = answerset.data.get(qid, None)
            if answer is None:
                answerset.skipped = None
                answerset.save()
                continue
            yesno = answer['choice']
            answerset.skipped = True if yesno == 'No' else None
            if answerset.skipped:
                skipped = True
            answerset.save()
        # There can only be one answerset if any has been skipped
        if skipped and AnswerSet.objects.filter(section=section).count() > 1:
            keep = AnswerSet.objects.filter(
                section=section,
                skipped=True
            ).order_by('id').first()
            for answerset in AnswerSet.objects.filter(section=section):
                if answerset.id == keep.id:
                    continue
                answerset.delete()


def set_toggle_question_answer_from_answerset_skipped(apps, _):
    Section = apps.get_model('dmpt', 'Section')
    Question = apps.get_model('dmpt', 'Question')
    AnswerSet = apps.get_model('plan', 'AnswerSet')
    for section in Section.objects.filter(optional=True):
        # If at this point there is no toggle question, we have bigger problems
        toggle_question = Question.objects.get(
            section=section,
            position=0,
            input_type_id='bool'
        )
        qid = str(toggle_question.id)
        for answerset in AnswerSet.objects.filter(section=section):
            yesno = 'No' if answerset.skipped else 'Yes'
            answer = answerset.data.get(qid, None)
            if answer is None or not answer.get('choice', None):
                answer = {'notes': '', 'choice': yesno}
                answerset.data[qid] = answer
                answerset.save()
                continue
            existing = answer.copy()
            answer['choice'] = yesno
            answerset.data[qid] = answer
            if existing['choice'] != yesno:
                answerset.previous_data[qid] = existing
            answerset.save()


class Migration(migrations.Migration):

    dependencies = [
        ('dmpt', '0013_template_uuid'),
        ('plan', '0004_alter_answerset_identifier'),
    ]

    operations = [
        migrations.AddField(
            model_name='section',
            name='optional_canned_text',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='section',
            name='optional',
            field=models.BooleanField(default=False, help_text='True if this section is optional. Add an optional canned text to stand in for the questions if needed if the section is later skipped.'),
        ),
        migrations.RunPython(fill_section_optional_canned_text, migrations.RunPython.noop),
        migrations.RunPython(set_answerset_skipped_from_toggle_question_answer, set_toggle_question_answer_from_answerset_skipped),
        migrations.RunPython(migrations.RunPython.noop, fill_section_toggle_question),
    ]
