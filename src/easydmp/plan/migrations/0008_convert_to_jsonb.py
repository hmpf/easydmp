# Generated by Django 3.1.3 on 2020-11-06 10:04

import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
from django.db import migrations

import json


def convert_to_jsonblob(apps, schema_editor):
    # data/previous_data can in this scenario be a str with a serialized
    # dict, or a dict. If dict, do nothing. If somebody has pranked the
    # system and entered a string that is not interpretable as json we'll
    # still fail loudly.
    #
    # ``update`` is used in order to not change ``Plan.modified``
    Plan = apps.get_model('plan', 'Plan')
    for p in Plan.objects.only('id', 'data', 'previous_data'):
        pqs = Plan.objects.filter(id=p.id)
        change_dict = {}
        if isinstance(p.data, str):
            change_dict['data'] = json.loads(p.data)
        if isinstance(p.previous_data, str):
            change_dict['previous_data'] = json.loads(p.previous_data)
        if change_dict:
            Plan.objects.filter(id=p.id).update(**change_dict)


def convert_to_text(apps, schema_editor):
    "Will be converted back by previous migration in operations list"
    pass



class Migration(migrations.Migration):

    dependencies = [
        ('plan', '0007_auto_20201111_1411'),
    ]

    operations = [
        migrations.AlterField(
            model_name='plan',
            name='data',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
        ),
        migrations.AlterField(
            model_name='plan',
            name='previous_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
        ),
        migrations.RunPython(
            code=convert_to_jsonblob,
            reverse_code=convert_to_text,
        )
    ]
